#!/usr/bin/env bash
#
# hhhconf - a config tool for tint2
#
# shellcheck disable=2154 source=/dev/null

die () {
	printf '\033[31mfatal:\033[m %b\n' "$@" >&2
	exit 1
}

log () {
	printf '\033[32m=>\033[m %s\n' "$@"
}

say () {
	printf "${g_print_col}%b\n" "$@"
}

xtype () {
	type "$1" >/dev/null 2>&1 || die "depend on $1"
}

read_sleep () {
	read -rst "${1:-1}" -N 999
	return 0
}

backup () {
	local files_to_backup="${HOME}/.config/tint2/tint2rc"
	local backup_dir
	backup_dir="${HOME}/.cache/hhhconf/backup/$(date +%Y%m%d%H%M%S%N)"
	test -d "${backup_dir}" && die "duplicate backup directory"
	mkdir -p "${backup_dir}"
	log "backup to $backup_dir"
	for f in ${files_to_backup}
	do
		test -e "${f}" || continue
		cp -p "${f}" "${backup_dir}"
	done
}

set_color () {
	local color=$1 r g b
	case "${color:=7}" in
		"#"*)
			(( r=16#${color:1:2} ))
			(( g=16#${color:3:2} ))
			(( b=16#${color:5:6} ))
			: "\\e[38;2;${r};${g};${b}m"
			;;
		[0-9]*)	: "\\e[38;5;${color}m" ;;
		*)	: "\\e[38;5;7m" ;;
	esac
	printf -v g_print_col '%b' "$_"
}

preview_terminal_colors () {
	local count=0
	local i
	printf "%b\n" "[terminal colors]"
	for i in {0..15}; do
		set_color 7
		printf "${g_print_col}%2d " "$count"
		set_color $i
		printf "${g_print_col}%b" "███  "
		set_color 7
		[[ $i -eq 7 ]] && printf "\n"
		(( count++ ))
	done
	printf "\n"
}

preview_pywal_colors () {
	local count=0
	local i
	local wal_colours="${HOME}/.cache/wal/colors.sh"
	[[ -e $wal_colours ]] || { log "cannot find pywal colors" ; return; }
	. "$wal_colours"
	printf "%b\n" "[pywal colors]"
	g_arr=($color0 $color1 $color3 $color4 $color5 $color6 $color7 $color8 $color9 $color10 $color11 $color12 $color13 $color14 $color15)
	for i in "${!g_arr[@]}"; do
		set_color 7
		printf "${g_print_col}%2d)  %s  " "$i" "${g_arr[i]}"
		set_color ${g_arr[i]}
		printf "${g_print_col}%b\n" "███  "
	done
	set_color 7
	printf "\n"
}

preview_colors () {
	preview_terminal_colors
	preview_pywal_colors
}

# arr_{prompt,check} are helpers for g_arr
arr_prompt () {
	highest_number=${#g_arr[@]}
	: $((highest_number--))
	printf "%b" "Choose 0-$highest_number: "
}

arr_check () {
	re_uint='^[0-9]+$'
	[[ $1 =~ $re_uint ]] || die "not unsigned integer"
	[[ $1 -ge ${#g_arr[@]} ]] && die "number too big"
}

tint2_set_active_task_bg () {
	backup
	preview_pywal_colors
	arr_prompt ; read -r choice ; arr_check "$choice"
	hhhconf-t2 -s task_active background_color "${g_arr[$choice]} 100"
}

tint2_use_gtk_font () {
	backup
	local font=$(hhhconf-gtkfont)
	hhhconf-t2 -F
	hhhconf-t2 -p "task_font" "$font"
	hhhconf-t2 -p "taskbar_name_font" "$font"
	hhhconf-t2 -p "time1_font" "$font"
	hhhconf-t2 -p "time2_font" "$font"
	hhhconf-t2 -p "tooltip_font" "$font"
	hhhconf-t2 -p "bat1_font" "$font"
	hhhconf-t2 -p "bat2_font" "$font"
	hhhconf-t2 -p "execp_font" "$font"
	hhhconf-t2 -p "button_font" "$font"
}

hard_restart () {
	log "restart $1"
	killall "$1" ; nohup "$1" >/dev/null 2>&1 &
	disown
}

print_commands () {
	printf "%b" "\
[tint2]\n\
f = use gtk3 font\n\
i = import config files\n\
p = set active task bg col\n\
t = restart\n\
\n\
[general]\n\
s = sleep one second\n\
h = show available commands\n\
c = preview colors\n\
q = quit\n"
}

bad_command () {
	log "($1) is not a recognised command"
}

process_command_string () {
	# process one character at a time
	for ((i=0;i<${#1};i++)); do
		case "${1:$i:1}" in
			c) preview_colors ;;
			f) tint2_use_gtk_font ;;
			i) backup ; hhhconf-import ;;
			t) hard_restart tint2 ;;
			p) tint2_set_active_task_bg ;;
			h|\?) print_commands ;;
			q) return 1 ;;
			s) read_sleep 1 ;;
			'') ;;
			*) bad_command "$1" ;;
		esac
	done
}

prompt () {
	local cmd=
	printf "%b" "\033[32mWhat now>\033[m "
	read -r cmd
	process_command_string "$cmd"
}

await_user_command () {
	print_commands
	while :
	do
		prompt || break
	done
}

usage () {
	printf "%b\n" "Usage: hhhconf [-h] [<commands>]"
	printf "%b\n" "Commands:"
	print_commands
	exit 0
}

args() {
	case $1 in
		-h)	usage ;;
		*)	process_command_string "$1" ;;
	esac
}

main() {
	xtype tint2
	if [[ $# -gt 0 ]]; then
		args "$@"
	else
		await_user_command
	fi
}

main "$@"
