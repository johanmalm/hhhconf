#!/usr/bin/env bash
#
# hhhconf - a config tool for tint2
#
# shellcheck disable=2154 source=/dev/null

hhh_cache_dir="$HOME/.cache/hhhconf"
pal_cache_file="$hhh_cache_dir/palette"

die () {
	printf '\033[31mfatal:\033[m %b\n' "$@" >&2
	exit 1
}

log () {
	printf '\033[32m=>\033[m %s\n' "$@"
}

say () {
	printf "${g_print_col}%b\n" "$@"
}

xtype () {
	type "$1" >/dev/null 2>&1 || die "depend on $1"
}

check_term_compatibility () {
	[[ $TERM == *rxvt* ]] && die "terminal type 'rxvt' not supported"
}

backup () {
	local files_to_backup="${HOME}/.config/tint2/tint2rc"
	local backup_dir
	backup_dir="$hhh_cache_dir/backup/$(date +%Y%m%d%H%M%S%N)"
	test -d "${backup_dir}" && die "duplicate backup directory"
	mkdir -p "${backup_dir}"
	log "backup to $backup_dir"
	for f in ${files_to_backup}
	do
		test -e "${f}" || continue
		cp -p "${f}" "${backup_dir}"
	done
}

set_color () {
	local color=$1 r g b
	case "${color:=7}" in
		"#"*)
			(( r=16#${color:1:2} ))
			(( g=16#${color:3:2} ))
			(( b=16#${color:5:6} ))
			: "\\e[38;2;${r};${g};${b}m"
			;;
		[0-9]*)	: "\\e[38;5;${color}m" ;;
		*)	: "\\e[38;5;7m" ;;
	esac
	printf -v g_print_col '%b' "$_"
}

set_pal_0_default () {
	g_arr=( "#111111" "#111122" "#111133"
	        "#112211" "#112222" "#112233"
		"#113311" "#113322" "#113333"
		"#221111" "#221122" "#221133"
		"#222211" "#222222" "#222233"
		"#223311" "#223322" "#223333"
		"#331111" "#331122" "#331133"
		"#332211" "#332222" "#332233"
		"#333311" "#333322" "#333333"
		"#aaaaaa" "#bbbbbb" "#cccccc"
		"#dddddd" "#eeeeee" "#ffffff"
	      )
	write_palette_cache
}

set_pal_1_obtheme () {
	g_arr=( $(hhhconf-obtheme $HOME/.config/openbox/bl-rc.xml) )
	if [[ -z $g_arr ]]; then
		log "loading default palette"
		return
	fi
	write_palette_cache
}

set_pal_2_pywal () {
	local wal_colours="${HOME}/.cache/wal/colors.sh"
	if [[ ! -e $wal_colours ]]; then
		log "cannot find pywal colors; loading default palette"
		set_pal_0_default
		return
	fi
	. "$wal_colours"
	printf "%b\n" "[pywal colors]"
	g_arr=( "$color0" "$color1" "$color3" "$color4" "$color5" "$color6" "$color7" "$color8" "$color9" "$color10" "$color11" "$color12" "$color13" "$color14" "$color15" )
	write_palette_cache
}

set_pal_3_moonlight () {
	g_arr=( "#1C2E35" "#21333B" "#233946" "#243E4E" "#274758" "#BC4B4F" )
	write_palette_cache
}

hashify () {
	# Add '#' to each colour in $raw_colors
	# Curtail to 'rrggbb' - ignore any 'aa' which we sometimes get stuck on at end
	for ((i=1;i<${#raw_colors[@]};i++)); do
	    printf '#%.6s\n' "${raw_colors[i]}"
	done
}

set_pal_4_nitrogen () {
	local nitrogen_cache nitrogen_image line
	xtype convert
	nitrogen_cache="$HOME/.config/nitrogen/bg-saved.cfg"
	[[ -e $nitrogen_cache ]] || die "cannot find ${nitrogen_cache}"
	while read -r line; do
		if [[ $line = *file* ]]; then
			nitrogen_image="${line##*=}"
		break
		fi
	done < "$nitrogen_cache"
	[[ -z $nitrogen_image ]] && die "nitrogen/bg-saved.cfg contains no background image name"
	echo -e "Getting palette from image $nitrogen_image..."
	IFS=$'\n' read -d "" -ra raw_colors < <(convert "$nitrogen_image" -resize 25% -colors 16 -unique-colors txt:-)
	raw_colors=("${raw_colors[@]//*\#}")
	raw_colors=("${raw_colors[@]// *}")
	g_arr=( $(hashify) )
	write_palette_cache
}

write_palette_cache () {
	mkdir -p "$hhh_cache_dir"
	rm -f "$pal_cache_file"
	for ((i=0;i<${#g_arr[@]};i++)); do
	    printf '%b\n' "${g_arr[i]}" >>"$pal_cache_file"
	done
}

read_palette_cache () {
	[[ -e "$pal_cache_file" ]] || die "select palette first"
	mapfile -t g_arr < "$pal_cache_file"
}

view_palette () {
	# based on what's in g_arr
	local count=0
	local i
	for i in "${!g_arr[@]}"; do
		set_color 7
		printf "${g_print_col}%2d)  %s  " "$i" "${g_arr[i]}"
		set_color "${g_arr[i]}"
		printf "${g_print_col}%b" "███  "
		set_color 7
		(( count++ ))
		if [[ $count -eq 4 ]]; then
			count=0
			say ""
		fi
	done
	set_color 7
	say ""
}

# arr_{prompt,check} are helpers for g_arr
arr_prompt () {
	highest_number=${#g_arr[@]}
	: $((highest_number--))
	printf "%b" "Choose 0-$highest_number: "
}

arr_check () {
	re_uint='^[0-9]+$'
	[[ $1 =~ $re_uint ]] || die "not unsigned integer"
	[[ $1 -ge ${#g_arr[@]} ]] && die "number too big"
}

tint2_set_active_task_border () {
	backup
	read_palette_cache
	arr_prompt ; read -r choice ; arr_check "$choice"
	hhhconf-t2 -s task_active border_color "${g_arr[$choice]} 100"
}

tint2_set_panel_bg () {
	backup
	read_palette_cache
	arr_prompt ; read -r choice ; arr_check "$choice"
	hhhconf-t2 -s panel background_color "${g_arr[$choice]} 100"
}

tint2_set_active_task_bg () {
	backup
	read_palette_cache
	arr_prompt ; read -r choice ; arr_check "$choice"
	hhhconf-t2 -s task_active background_color "${g_arr[$choice]} 100"
}

gtkfont () {
	gtktheme="$HOME/.config/gtk-3.0/settings.ini"
	[[ -e $gtktheme ]] || die "gtk-3.0/settings.ini cannot be found"
	while read -r line; do
		if [[ $line = *gtk-font-name* ]]; then
			font="${line##*=}"
		break
		fi
	done < "$gtktheme"
	[[ -z $font ]] && die "settings.ini contains no font name"
	# print without font size
	printf '%b\n' "${font%\ *}"
}

tint2_use_gtk_font () {
	backup
	local font
	font=$(gtkfont)
	hhhconf-t2 -F
	hhhconf-t2 -p "task_font" "$font"
	hhhconf-t2 -p "taskbar_name_font" "$font"
	hhhconf-t2 -p "time1_font" "$font"
	hhhconf-t2 -p "time2_font" "$font"
	hhhconf-t2 -p "tooltip_font" "$font"
	hhhconf-t2 -p "bat1_font" "$font"
	hhhconf-t2 -p "bat2_font" "$font"
	hhhconf-t2 -p "execp_font" "$font"
	hhhconf-t2 -p "button_font" "$font"
}

tint2_import () {
	local i
	backup
	g_arr=(
		https://raw.githubusercontent.com/johanmalm/.dotfiles/master/dotfiles/.config/tint2/tint2rc
		https://raw.githubusercontent.com/BunsenLabs/bunsen-configs/hydrogen/skel/.config/tint2/tint2rc
		https://raw.githubusercontent.com/BunsenLabs/bunsen-configs/helium/skel/.config/tint2/tint2rc
		https://raw.githubusercontent.com/BunsenLabs/bunsen-configs/lithium/skel/.config/tint2/tint2rc
		https://raw.githubusercontent.com/hhhorb/lithium-theme-proposals/master/dotfiles/tint2rc-hhh-left.tint2rc
		https://bitbucket.org/archlabslinux/skel/raw/05503e89f2ec7c35d394868ba42a027f4818f059/openbox-home/.config/tint2/tint2rc
	)
	for i in "${!g_arr[@]}"; do
		title="${g_arr[i]}"
		title="${title/https:\/\/raw.githubusercontent.com\/}"
		title="${title/https:\/\/bitbucket.org\/}"
		title="${title/raw\/????????????????????????????????????????/...}"
		printf '%b\n' "$i)  $title"
	done
	arr_prompt ; read -r choice ; arr_check "$choice"
	curl -fLo ~/.config/tint2/tint2rc --create-dirs "${g_arr[$choice]}"
}

hard_restart () {
	log "restart $1"
	killall "$1" ; nohup "$1" >/dev/null 2>&1 &
	disown
}

print_commands () {
	set_color 15
	say "[set palette based on]"
	set_color 7
	say "  0 = default             1 = openbox theme       2 = pywal"
	say "  3 = moonlight5          4 = nitrogen image"
	set_color 15
	say "[tint2]"
	set_color 7
	say "  i = import tint2rc configs from github"
	say "  f = set font based on gtk3"
	say "  n = set active task border colour"
	say "  p = set active task background colour"
	say "  o = set panel background colour"
	say "  t = restart"
	set_color 15
	say "[general]"
	set_color 7
	say "  h = help                v = view palette        q = quit"
}

bad_command () {
	log "($1) is not a recognised command"
}

process_command_string () {
	# process one character at a time
	local c
	for ((c=0;c<${#1};c++)); do
		case "${1:$c:1}" in
			0) set_pal_0_default ; view_palette ;;
			1) set_pal_1_obtheme ; view_palette ;;
			2) set_pal_2_pywal ; view_palette ;;
			3) set_pal_3_moonlight ; view_palette ;;
			4) set_pal_4_nitrogen ; view_palette ;;
			f) tint2_use_gtk_font ;;
			i) tint2_import ;;
			t) hard_restart tint2 ;;
			n) tint2_set_active_task_border ;;
			o) tint2_set_panel_bg ;;
			p) tint2_set_active_task_bg ;;
			v) read_palette_cache ; view_palette ;;
			h|\?) print_commands ;;
			q) return 1 ;;
			'') ;;
			*) bad_command "$1" ;;
		esac
	done
}

prompt () {
	local cmd=
	printf "%b" "\033[32mWhat now>\033[m "
	read -r cmd
	process_command_string "$cmd"
}

await_user_command () {
	print_commands
	while :
	do
		prompt || break
	done
}

usage () {
	printf "%b\n" "Usage: hhhconf [-h] [<commands>]"
	printf "%b\n" "Commands:"
	print_commands
	exit 0
}

args() {
	case $1 in
		-h)	usage ;;
		*)	process_command_string "$1" ;;
	esac
}

main() {
	xtype tint2
	check_term_compatibility
	if [[ $# -gt 0 ]]; then
		args "$@"
	else
		await_user_command
	fi
}

main "$@"
